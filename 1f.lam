let

true = \x y. x;
false = \x y. y;

-- Booleans

if = \b e1 e2. b e1 e2;
not = \b. b false true;
and = \b1 b2. if b1 b2 false;
or = \b1 b2. if b1 true b2; 
xnor = \b1 b2. if b1 b2 (not b2);
xor = \b1 b2. if b1 (not b2) b2;

-- Numeros naturais
succ = \n. \A B. A(n A B);
add = \n1 n2. n1 succ n2;
mult = \n1 n2. n1 (\x. add n2 x) 0;
exp = \n1 n2. n2 (\x. mult n1 x) 1;
exp2 = \n1 n2. n2 n1;

-- Testes
isZero = \n. n(\x.false)(true);
isPos = \n. not (isZero n);


-- Pares
pair = \m n. \b. b m n;
fst = \p. p true;
snd = \p. p false;
shiftInc = \p. pair (snd p)(succ (snd p));
swap = \p. pair((snd p)(fst p));
prev = \n. fst (n shiftInc (pair 0 0));

sub = \a b. b prev a;
menor = \a b. isPos (sub b a);

isOne = \n. if isZero(prev n) true false; 
--retorta true para 0 tambem, mas eu estou testando se o numero eh 0 antes de usar esse teste, entÃ£o eh garantido que sera >0.

cons = pair;
empty = \x. true;

isEmpty = \l. l (\a b. false);
head = fst;
tail = snd;

Y = \f. (\x. f (x x)) (\x. f (x x));

-- Questao
multFrac = \a b. pair (mult (fst a) (fst b)) (mult (snd a) (snd b));

in
multFrac (pair 3 3) (pair 2 1)
